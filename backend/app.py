from flask import Flask, request, jsonify
from supabase import create_client, Client
from flasgger import Swagger
from dotenv import load_dotenv
import os

# ---- Load environment variables ----
load_dotenv()

app = Flask(__name__)

# ---- Swagger config ----
app.config["SWAGGER"] = {
    "title": "API",
    "uiversion": 3
}
swagger = Swagger(app)

# ---- Supabase setup ----
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
if not SUPABASE_URL or not SUPABASE_KEY:
    raise RuntimeError("Missing SUPABASE_URL or SUPABASE_KEY in .env")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

USERS_TABLE = "users"       # userId (PK, BIGINT auto), email, password, username, mobile, friendList (array/json)
MOOD_TABLE  = "moodMetric"  # id (BIGINT PK), sleepHours (SMALLINT), excerciseHours (SMALLINT),
                            # workingHrs (SMALLINT), mood (TEXT), sleepQuality (TEXT),
                            # userId (SMALLINT), created_timestamp (TIMESTAMP)

# ---------- Helpers ----------
def _exec_data(response):
    """
    Execute a Supabase response and return its data safely.
    Raises a readable Exception if the response has an error.
    """
    if hasattr(response, 'data') and hasattr(response, 'count'):
        # supabase-py v2+ Response
        return response.data
    elif isinstance(response, dict):
        # Older style
        if response.get("error"):
            err = response["error"]
            msg = err.get("message") if isinstance(err, dict) else str(err)
            raise Exception(msg)
        return response.get("data")
    else:
        return response

def _row_to_public_user(row: dict) -> dict | None:
    """Hide sensitive field (password) before returning to client."""
    if not row:
        return None
    return {
        "userId": row.get("userId"),
        "email": row.get("email"),
        "username": row.get("username"),
        "mobile": row.get("mobile"),
        "friendList": row.get("friendList") or [],
    }

def _get_user_by_email(email: str):
    try:
        response = supabase.table(USERS_TABLE).select("*").eq("email", email).execute()
        data = _exec_data(response)
        return data[0] if data else None
    except Exception as e:
        print(f"Error getting user by email: {e}")
        return None

def _get_user_by_id(user_id: str):
    try:
        response = supabase.table(USERS_TABLE).select("*").eq("userId", user_id).execute()
        data = _exec_data(response)
        return data[0] if data else None
    except Exception as e:
        print(f"Error getting user by ID: {e}")
        return None

def _create_user(email: str, password: str, username: str | None = None, mobile: str | None = None):
    """Create a user row; returns created row dict. userId is auto-generated by DB."""
    payload = {
        "email": email,
        "password": password,  # TODO: hash in production
        "username": username,
        "mobile": mobile,
        "friendList": [],
    }
    payload = {k: v for k, v in payload.items() if v is not None}

    response = supabase.table(USERS_TABLE).insert(payload).execute()
    data = _exec_data(response)
    return data[0] if data else None

def _update_friendlist_by_id(user_id: str, new_list):
    response = supabase.table(USERS_TABLE).update({"friendList": new_list}).eq("userId", user_id).execute()
    data = _exec_data(response)
    return data[0] if data else None

def _update_user_fields_by_id(user_id: str, fields: dict):
    """Update selected fields for a user; returns updated row dict."""
    fields = {k: v for k, v in fields.items() if v is not None}
    if not fields:
        return None
    response = supabase.table(USERS_TABLE).update(fields).eq("userId", user_id).execute()
    data = _exec_data(response)
    return data[0] if data else None

# ---------- Auth Routes ----------

@app.route("/login", methods=["POST"])
def login():
    """
    Login (custom users table)
    NOTE: Returns userId upon successful login.
    ---
    tags:
      - auth
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              format: email
              example: user@example.com
            password:
              type: string
              example: mypassword123
    responses:
      200:
        description: Logged in
      400:
        description: Missing or bad request
      401:
        description: Invalid credentials
    """
    data = request.get_json(silent=True) or {}
    email = data.get("email")
    password = data.get("password")

    if not email or not password:
        return jsonify({"error": "Missing email or password"}), 400

    user = _get_user_by_email(email)
    if not user or user.get("password") != password:
        return jsonify({"error": "Invalid credentials"}), 401

    return jsonify({
        "message": "Login successful",
        "user": _row_to_public_user(user)
    }), 200


@app.route("/signup", methods=["POST"])
def signup():
    """
    Sign up (create user)
    ---
    tags:
      - auth
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              format: email
              example: newuser@example.com
            password:
              type: string
              example: StrongPass123
            username:
              type: string
              example: New User
            mobile:
              type: string
              example: "+65 9123 4567"
    responses:
      201:
        description: User created
      400:
        description: Missing or bad request
      409:
        description: Email already exists
    """
    data = request.get_json(silent=True) or {}
    email = data.get("email")
    password = data.get("password")
    username = data.get("username")
    mobile = data.get("mobile")

    if not email or not password:
        return jsonify({"error": "Missing email or password"}), 400

    existing = _get_user_by_email(email)
    if existing:
        return jsonify({"error": "Email already exists"}), 409

    created = _create_user(email=email, password=password, username=username, mobile=mobile)
    return jsonify({"message": "User created", "user": _row_to_public_user(created)}), 201

# ---------- User Profile Routes ----------

@app.route("/userProfile", methods=["GET"])
def get_user_profile():
    """
    Get user profile by userId
    ---
    tags:
      - users
    parameters:
      - in: query
        name: userId
        required: true
        type: integer
        example: 12345
    responses:
      200:
        description: User profile
      400:
        description: Missing userId
      404:
        description: User not found
    """
    user_id = request.args.get("userId")
    if not user_id:
        return jsonify({"error": "Missing userId"}), 400

    user = _get_user_by_id(user_id)
    if not user:
        return jsonify({"error": "User not found"}), 404

    return jsonify(_row_to_public_user(user)), 200


@app.route("/userProfile", methods=["PUT"])
def update_user_profile():
    """
    Update user profile (by userId)
    ---
    tags:
      - users
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - userId
          properties:
            userId:
              type: integer
              example: 12345
            email:
              type: string
              format: email
              example: user@example.com
            password:
              type: string
              example: NewPass123
            username:
              type: string
              example: Updated Name
            mobile:
              type: string
              example: "+65 9000 0000"
    responses:
      200:
        description: Updated user
      400:
        description: Missing userId or no fields to update
      404:
        description: User not found
    """
    data = request.get_json(silent=True) or {}
    user_id = data.get("userId")
    if not user_id:
        return jsonify({"error": "Missing userId"}), 400

    user = _get_user_by_id(user_id)
    if not user:
        return jsonify({"error": "User not found"}), 404

    fields = {
        "email": data.get("email"),
        "password": data.get("password"),   # TODO: hash in production
        "username": data.get("username"),
        "mobile": data.get("mobile"),
    }
    updated = _update_user_fields_by_id(user_id, fields)
    if not updated:
        return jsonify({"error": "No fields to update"}), 400

    return jsonify(_row_to_public_user(updated)), 200

# ---------- Friend Routes ----------

@app.route("/addFriend", methods=["POST"])
def add_friend():
    """
    Add a friend to friendList (by userId)
    NOTE: user can be identified by userId or email (if userId not provided)
    To delete a friend, delete using his/her email.
    ---
    tags:
      - friends
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - userId
            - friendEmail
          properties:
            userId:
              type: string
              example: "12345"
            friendEmail:
              type: string
              format: email
              example: friend@example.com
            email:
              type: string
              format: email
              example: user@example.com
    responses:
      200:
        description: Updated friendList
    """
    data = request.get_json(silent=True) or {}
    user_id = data.get("userId")
    friend_email = data.get("friendEmail")
    fallback_email = data.get("email")

    if not user_id and not fallback_email:
        return jsonify({"error": "Missing userId (or email)"}), 400
    if not friend_email:
        return jsonify({"error": "Missing friendEmail"}), 400

    user = _get_user_by_id(user_id) if user_id else _get_user_by_email(fallback_email)
    if not user:
        return jsonify({"error": "User not found"}), 404

    friends = user.get("friendList") or []
    if friend_email not in friends:
        friends.append(friend_email)

    updated = _update_friendlist_by_id(user.get("userId"), friends)
    return jsonify(_row_to_public_user(updated)), 200


@app.route("/deleteFriend", methods=["DELETE"])
def delete_friend():
    """
    Delete a friend from friendList (by userId or email)
    ---
    tags:
      - friends
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - friendEmail
          properties:
            userId:
              type: string
              example: "12345"
            email:
              type: string
              format: email
              example: user@example.com
            friendEmail:
              type: string
              format: email
              example: friend@example.com
    responses:
      200:
        description: Updated friendList
    """
    data = request.get_json(silent=True) or {}
    user_id = data.get("userId")
    fallback_email = data.get("email")
    friend_email = data.get("friendEmail")

    if not user_id and not fallback_email:
        return jsonify({"error": "Missing userId (or email)"}), 400
    if not friend_email:
        return jsonify({"error": "Missing friendEmail"}), 400

    user = _get_user_by_id(user_id) if user_id else _get_user_by_email(fallback_email)
    if not user:
        return jsonify({"error": "User not found"}), 404

    friends = user.get("friendList") or []
    friends = [f for f in friends if f != friend_email]

    updated = _update_friendlist_by_id(user.get("userId"), friends)
    return jsonify(_row_to_public_user(updated)), 200

# ---------- Mood Metric Routes ----------
@app.route("/moodMetric", methods=["GET"])
def get_mood_metrics():
    """
    Get mood metric(s)
    ---
    tags:
      - moodMetric
    parameters:
      - in: query
        name: id
        type: integer
        required: false
        description: Get a single row by id
        example: 123
      - in: query
        name: userId
        type: integer
        required: false
        description: Filter by userId
        example: 42
    responses:
      200:
        description: List or single mood metric (all fields)
      404:
        description: Row not found (when id is provided)
      500:
        description: Server error
    """
    try:
        q_id = request.args.get("id", type=int)
        user_id = request.args.get("userId", type=int)

        # Fetch one by id
        if q_id is not None:
            resp = supabase.table(MOOD_TABLE).select("*").eq("id", q_id).execute()
            data = _exec_data(resp)
            if not data:
                return jsonify({"error": "Row not found"}), 404
            return jsonify({"row": data[0]}), 200

        # Fetch many (filtered by userId if provided)
        query = supabase.table(MOOD_TABLE).select("*")
        if user_id is not None:
            query = query.eq("userId", user_id)

        resp = query.execute()
        rows = _exec_data(resp) or []

        return jsonify({"rows": rows}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500



@app.route("/moodMetric", methods=["POST"])
def create_mood_metric():
    """
    Create a mood metric entry
    ---
    tags:
      - moodMetric
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - userId
          properties:
            userId:
              type: integer
              example: 42
            sleepHours:
              type: integer
              example: 7
            excerciseHours:
              type: integer
              example: 1
            workingHrs:
              type: integer
              example: 8
            mood:
              type: string
              example: Calm / content
            sleepQuality:
              type: string
              example: Good
            finalMoodScores:
              type: string
              example: "73"    # or any scoring format you store, e.g. "B+" or "73.5"
            created_timestamp:
              type: string
              example: "2025-09-02 21:30:00"
    responses:
      201:
        description: Created mood metric
      400:
        description: Missing required fields
      500:
        description: Server error
    """
    data = request.get_json(silent=True) or {}
    user_id = data.get("userId")
    if user_id is None:
        return jsonify({"error": "Missing userId"}), 400

    payload = {
        "userId": user_id,
        "sleepHours": data.get("sleepHours"),
        "excerciseHours": data.get("excerciseHours"),
        "workingHrs": data.get("workingHrs"),
        "mood": data.get("mood"),
        "sleepQuality": data.get("sleepQuality"),
        "finalMoodScores": data.get("finalMoodScores"),
        "created_timestamp": data.get("created_timestamp"),
    }
    payload = {k: v for k, v in payload.items() if v is not None}

    try:
        resp = supabase.table(MOOD_TABLE).insert(payload).execute()
        created = _exec_data(resp)
        return jsonify({"message": "Created", "row": created[0] if created else None}), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500



@app.route("/moodMetric", methods=["PUT"])
def update_mood_metric():
    """
    Update a mood metric entry by id
    ---
    tags:
      - moodMetric
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - id
          properties:
            id:
              type: integer
              example: 123
            userId:
              type: integer
              example: 42
            sleepHours:
              type: integer
              example: 7
            excerciseHours:
              type: integer
              example: 2
            workingHrs:
              type: integer
              example: 9
            mood:
              type: string
              example: Stressed / anxious
            sleepQuality:
              type: string
              example: Poor
            finalMoodScores:
              type: string
              example: "65"
            created_timestamp:
              type: string
              example: "2025-09-02 22:00:00"
    responses:
      200:
        description: Updated mood metric
      400:
        description: Missing id or no fields to update
      404:
        description: Row not found
      500:
        description: Server error
    """
    data = request.get_json(silent=True) or {}
    row_id = data.get("id")
    if row_id is None:
        return jsonify({"error": "Missing id"}), 400

    fields = {
        "userId": data.get("userId"),
        "sleepHours": data.get("sleepHours"),
        "excerciseHours": data.get("excerciseHours"),
        "workingHrs": data.get("workingHrs"),
        "mood": data.get("mood"),
        "sleepQuality": data.get("sleepQuality"),
        "finalMoodScores": data.get("finalMoodScores"),
        "created_timestamp": data.get("created_timestamp"),
    }
    fields = {k: v for k, v in fields.items() if v is not None}
    if not fields:
        return jsonify({"error": "No fields to update"}), 400

    try:
        resp = supabase.table(MOOD_TABLE).update(fields).eq("id", row_id).execute()
        updated = _exec_data(resp)
        if not updated:
            return jsonify({"error": "Row not found"}), 404
        return jsonify({"message": "Updated", "row": updated[0]}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500



if __name__ == "__main__":
    app.run(debug=True)
