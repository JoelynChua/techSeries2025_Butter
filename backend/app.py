from flask import Flask, request, jsonify
from supabase import create_client, Client
from flasgger import Swagger
from dotenv import load_dotenv
import os
from flask_cors import CORS

# ---- Load environment variables ----
load_dotenv()

app = Flask(__name__)
# CORS (adjust origins as needed)
CORS(app, resources={r"/*": {"origins": ["http://localhost:5173"]}})

# ---- Swagger config ----
app.config["SWAGGER"] = {
    "title": "API",
    "uiversion": 3
}
swagger = Swagger(app)

# ---- Supabase setup ----
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
if not SUPABASE_URL or not SUPABASE_KEY:
    raise RuntimeError("Missing SUPABASE_URL or SUPABASE_KEY in .env")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# ---- Table names (use variables consistently) ----
users_table   = "users"
mood_table    = "moodMetrics"
friends_table = "friend"
quizqn_table = "quizqn"
label_options_table = "label_options"
range_config_table = "range_config"
mascot_table = "mascot"

# ---------- Helpers ----------
def _exec_data(response):
    """
    Normalize supabase-py response to a plain list-of-rows (or value).
    Raises a readable Exception if the response has an error (older SDK shapes).
    """
    if hasattr(response, "data") and hasattr(response, "count"):
        return response.data
    elif isinstance(response, dict):
        if response.get("error"):
            err = response["error"]
            msg = err.get("message") if isinstance(err, dict) else str(err)
            raise Exception(msg)
        return response.get("data")
    else:
        return response


def _row_to_public_user(row: dict) -> dict | None:
    """Hide sensitive fields (password)."""
    if not row:
        return None
    return {
        "userId": row.get("userId"),
        "email": row.get("email"),
        "username": row.get("username"),
        "mobile": row.get("mobile"),
    }


def _get_user_by_email(email: str):
    try:
        response = supabase.table(users_table).select("*").eq("email", email).limit(1).execute()
        data = _exec_data(response)
        return data[0] if data else None
    except Exception as e:
        print(f"Error getting user by email: {e}")
        return None


def _get_user_by_username(username: str):
    try:
        response = supabase.table(users_table).select("*").eq("username", username).limit(1).execute()
        data = _exec_data(response)
        return data[0] if data else None
    except Exception as e:
        print(f"Error getting user by username: {e}")
        return None


def _get_user_by_id(user_id: str):
    try:
        response = supabase.table(users_table).select("*").eq("userId", user_id).limit(1).execute()
        data = _exec_data(response)
        return data[0] if data else None
    except Exception as e:
        print(f"Error getting user by ID: {e}")
        return None


def _create_user(email: str, password: str, username: str | None = None, mobile: str | None = None):
    """Create a user row; returns created row dict. userId is auto-generated by DB."""
    payload = {
        "email": email,
        "password": password,  # TODO: hash in production
        "username": username,
        "mobile": mobile,
    }
    payload = {k: v for k, v in payload.items() if v is not None}
    response = supabase.table(users_table).insert(payload).execute()
    data = _exec_data(response)
    return data[0] if data else None


def _update_user_fields_by_id(user_id: str, fields: dict):
    """Update selected fields for a user; returns updated row dict."""
    fields = {k: v for k, v in fields.items() if v is not None}
    if not fields:
        return None
    response = supabase.table(users_table).update(fields).eq("userId", user_id).execute()
    data = _exec_data(response)
    return data[0] if data else None


# Whitelist + sanitizer for friends payloads
FRIEND_FIELDS = {
    "friendofuid", "username", "email", "phone",
    "relationship", "tags", "emergencycontact"
}
def _filter_friend_fields(data: dict) -> dict:
    """Keep only allowed keys and non-None values; normalize tags."""
    out = {k: v for k, v in data.items() if k in FRIEND_FIELDS and v is not None}
    # optional: standardize email casing
    if "email" in out and isinstance(out["email"], str):
        out["email"] = out["email"].strip().lower()
    # Normalize tags: allow array or comma-separated string
    if "tags" in out and isinstance(out["tags"], str):
        out["tags"] = [t.strip() for t in out["tags"].split(",") if t.strip()]
    return out


# ---------- Auth Routes ----------
@app.route("/login", methods=["POST"])
def login():
    """
    Login (custom users table)
    NOTE: Returns public user object upon successful login.
    ---
    tags:
      - auth
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              example: user@example.com
            password:
              type: string
              example: mypassword123
    responses:
      200:
        description: Logged in
      400:
        description: Missing or bad request
      401:
        description: Invalid credentials
    """
    data = request.get_json(silent=True) or {}
    email = data.get("email")
    password = data.get("password")

    if not email or not password:
        return jsonify({"error": "Missing email or password"}), 400

    user = _get_user_by_email(email)
    if not user or user.get("password") != password:
        return jsonify({"error": "Invalid credentials"}), 401

    return jsonify({"message": "Login successful", "user": _row_to_public_user(user)}), 200


@app.route("/signup", methods=["POST"])
def signup():
    """
    Sign up (create user)
    ---
    tags:
      - auth
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              example: newuser@example.com
            password:
              type: string
              example: StrongPass123
            username:
              type: string
              example: New User
            mobile:
              type: string
              example: "+65 9123 4567"
    responses:
      201:
        description: User created
      400:
        description: Missing or bad request
      409:
        description: Email already exists
    """
    data = request.get_json(silent=True) or {}
    email = data.get("email")
    password = data.get("password")
    username = data.get("username")
    mobile = data.get("mobile")

    if not email or not password:
        return jsonify({"error": "Missing email or password"}), 400

    existing = _get_user_by_email(email)
    if existing:
        return jsonify({"error": "Email already exists"}), 409

    created = _create_user(email=email, password=password, username=username, mobile=mobile)
    return jsonify({"message": "User created", "user": _row_to_public_user(created)}), 201


# ---------- User Profile Routes ----------
@app.route("/userProfile", methods=["GET"])
def get_user_profile():
    """
    Get user profile by userId
    ---
    tags:
      - users
    parameters:
      - in: query
        name: userId
        required: true
        type: integer
        example: 12345
    responses:
      200:
        description: User profile
      400:
        description: Missing userId
      404:
        description: User not found
    """
    user_id = request.args.get("userId")
    if not user_id:
        return jsonify({"error": "Missing userId"}), 400

    user = _get_user_by_id(user_id)
    if not user:
        return jsonify({"error": "User not found"}), 404

    return jsonify(_row_to_public_user(user)), 200


@app.route("/userProfile", methods=["PUT"])
def update_user_profile():
    """
    Update user profile (by userId)
    ---
    tags:
      - users
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - userId
          properties:
            userId:
              type: integer
              example: 12345
            email:
              type: string
              example: user@example.com
            password:
              type: string
              example: NewPass123
            username:
              type: string
              example: Updated Name
            mobile:
              type: string
              example: "+65 9000 0000"
    responses:
      200:
        description: Updated user
      400:
        description: Missing userId or no fields to update
      404:
        description: User not found
    """
    data = request.get_json(silent=True) or {}
    user_id = data.get("userId")
    if not user_id:
        return jsonify({"error": "Missing userId"}), 400

    user = _get_user_by_id(user_id)
    if not user:
        return jsonify({"error": "User not found"}), 404

    fields = {
        "email": data.get("email"),
        "password": data.get("password"),  # TODO: hash in production
        "username": data.get("username"),
        "mobile": data.get("mobile"),
    }
    updated = _update_user_fields_by_id(user_id, fields)
    if not updated:
        return jsonify({"error": "No fields to update"}), 400

    return jsonify(_row_to_public_user(updated)), 200


# ---------- Mood Metric Routes ----------
@app.route("/moodMetric", methods=["GET"])
def get_mood_metrics():
    """
    Get mood metric(s)
    ---
    tags:
      - moodMetric
    parameters:
      - in: query
        name: id
        type: integer
        required: false
        description: Get a single row by id
        example: 123
      - in: query
        name: userId
        type: integer
        required: false
        description: Filter by userId
        example: 42
    responses:
      200:
        description: List or single mood metric (all fields)
      404:
        description: Row not found (when id is provided)
      500:
        description: Server error
    """
    try:
        q_id = request.args.get("id", type=int)
        user_id = request.args.get("userId", type=int)

        # Fetch one by id
        if q_id is not None:
            resp = supabase.table(mood_table).select("*").eq("id", q_id).limit(1).execute()
            data = _exec_data(resp)
            if not data:
                return jsonify({"error": "Row not found"}), 404
            return jsonify({"row": data[0]}), 200

        # Fetch many (filtered by userId if provided)
        query = supabase.table(mood_table).select("*")
        if user_id is not None:
            query = query.eq("userId", user_id)

        resp = query.execute()
        rows = _exec_data(resp) or []
        return jsonify({"rows": rows}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/moodMetric", methods=["POST"])
def create_mood_metric():
    """
    Create a mood metric entry
    ---
    tags:
      - moodMetric
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - userId
          properties:
            userId:
              type: integer
              example: 42
            sleepHours:
              type: integer
              example: 7
            exerciseHours:
            exerciseHours:
              type: integer
              example: 1
            workingHrs:
              type: integer
              example: 8
            mood:
              type: string
              example: "Calm / content"
            sleepQuality:
              type: string
              example: "Good"
            finalMoodScores:
              type: string
              example: "73"
            created_timestamp:
              type: string
              example: "2025-09-02 21:30:00"
            connectwithfamily:
              type: boolean
              example: true
    responses:
      201:
        description: Created mood metric
      400:
        description: Missing required fields
      500:
        description: Server error
    """
    data = request.get_json(silent=True) or {}
    user_id = data.get("userId")
    if user_id is None:
        return jsonify({"error": "Missing userId"}), 400

    exercise_hours = data.get("exerciseHours", data.get("excerciseHours"))  # backward compat

    payload = {
        "userId": user_id,
        "sleepHours": data.get("sleepHours"),
        "exerciseHours": exercise_hours,
        "workingHrs": data.get("workingHrs"),
        "mood": data.get("mood"),
        "sleepQuality": data.get("sleepQuality"),
        "finalMoodScores": data.get("finalMoodScores"),
        "created_timestamp": data.get("created_timestamp"),
        "connectwithfamily": data.get("connectwithfamily"),
    }
    payload = {k: v for k, v in payload.items() if v is not None}

    try:
        resp = supabase.table(mood_table).insert(payload).execute()
        created = _exec_data(resp)
        return jsonify({"message": "Created", "row": created[0] if created else None}), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/moodMetric", methods=["PUT"])
def update_mood_metric():
    """
    Update a mood metric entry by id
    ---
    tags:
      - moodMetric
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - id
          properties:
            id:
              type: integer
              example: 123
            userId:
              type: integer
              example: 42
            sleepHours:
              type: integer
              example: 7
            exerciseHours:
              type: integer
              example: 2
            workingHrs:
              type: integer
              example: 9
            mood:
              type: string
              example: "Stressed / anxious"
            sleepQuality:
              type: string
              example: "Poor"
            finalMoodScores:
              type: string
              example: "65"
            created_timestamp:
              type: string
              example: "2025-09-02 22:00:00"
            connectwithfamily:
              type: boolean
              example: false
    responses:
      200:
        description: Updated mood metric
      400:
        description: Missing id or no fields to update
      404:
        description: Row not found
      500:
        description: Server error
    """
    data = request.get_json(silent=True) or {}
    row_id = data.get("id")
    if row_id is None:
        return jsonify({"error": "Missing id"}), 400

    exercise_hours = data.get("exerciseHours", data.get("excerciseHours"))  # backward compat

    fields = {
        "userId": data.get("userId"),
        "sleepHours": data.get("sleepHours"),
        "exerciseHours": exercise_hours,
        "workingHrs": data.get("workingHrs"),
        "mood": data.get("mood"),
        "sleepQuality": data.get("sleepQuality"),
        "finalMoodScores": data.get("finalMoodScores"),
        "created_timestamp": data.get("created_timestamp"),
        "connectwithfamily": data.get("connectwithfamily"),
    }
    fields = {k: v for k, v in fields.items() if v is not None}
    if not fields:
        return jsonify({"error": "No fields to update"}), 400

    try:
        resp = supabase.table(mood_table).update(fields).eq("id", row_id).execute()
        updated = _exec_data(resp)
        if not updated:
            return jsonify({"error": "Row not found"}), 404
        return jsonify({"message": "Updated", "row": updated[0]}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ---------- Quiz Question Routes ----------
@app.route("/quizqn", methods=["GET"])
def get_quizqn():
    """
    Get quizqn entries
    ---
    tags:
      - quizqn
    parameters:
      - in: query
        name: id
        type: integer
        required: false
        description: Return a single row by id
        example: 123
    responses:
      200:
        description: Row or list of rows
      404:
        description: Row not found (when id provided)
      500:
        description: Server error
    """
    try:
        cols = ["id", "sleephours", "workhours", "exercisehours", "sleepquality", "mood", "connectwithfamily"]

        q_id = request.args.get("id", type=int)

        if q_id is not None:
            resp = supabase.table(quizqn_table).select(",".join(cols)).eq("id", q_id).limit(1).execute()
            data = _exec_data(resp)
            if not data:
                return jsonify({"error": "Row not found"}), 404
            return jsonify({"row": data[0]}), 200

        resp = supabase.table(quizqn_table).select(",".join(cols)).order("id", desc=True).execute()
        rows = _exec_data(resp) or []
        return jsonify({"rows": rows, "count": len(rows)}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ---------- Label Options ----------
@app.route("/labelOptions", methods=["GET"])
def get_fields():
    """
    Get label options by field_name
    ---
    tags:
      - labelOptions
    parameters:
      - in: query
        name: field_name
        type: string
        required: true
        description: Return rows that match this field_name
        example: sleepquality
    responses:
      200:
        description: List of matching rows
      400:
        description: Missing field_name
      404:
        description: No rows found
      500:
        description: Server error
    """
    try:
        cols = ["id", "field_name", "labelvalue"]

        field_name = request.args.get("field_name")
        if not field_name:
            return jsonify({"error": "Missing field_name"}), 400

        resp = (
            supabase.table(label_options_table)
            .select(",".join(cols))
            .eq("field_name", field_name)
            .execute()
        )
        rows = _exec_data(resp) or []

        if not rows:
            return jsonify({"error": "No rows found"}), 404

        return jsonify({"rows": rows, "count": len(rows)}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ---------- Range Config ----------
@app.route("/rangeConfig", methods=["GET"])
def get_range_config():
    """
    Get range configuration entries by field_name
    ---
    tags:
      - rangeConfig
    parameters:
      - in: query
        name: field_name
        type: string
        required: true
        description: Return rows that match this field_name
        example: workhours
    responses:
      200:
        description: List of matching rows
      400:
        description: Missing field_name
      404:
        description: No rows found
      500:
        description: Server error
    """
    try:
        cols = ["id", "min_value", "max_value", "step_value", "field_name"]

        field_name = request.args.get("field_name")
        if not field_name:
            return jsonify({"error": "Missing field_name"}), 400

        resp = (
            supabase.table(range_config_table)
            .select(",".join(cols))
            .eq("field_name", field_name)
            .execute()
        )
        rows = _exec_data(resp) or []

        if not rows:
            return jsonify({"error": "No rows found"}), 404

        return jsonify({"rows": rows, "count": len(rows)}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ---------- Encouragement ----------
@app.route("/mascotWords", methods=["GET"])
def get_encouragement():
    """
    Get encouragement words by feeling
    ---
    tags:
      - encouragement
    parameters:
      - in: query
        name: feeling
        type: string
        required: true
        description: Return encouragement words that match this feeling
        example: sad
    responses:
      200:
        description: Matching encouragement words
      400:
        description: Missing feeling
      404:
        description: No rows found
      500:
        description: Server error
    """
    try:
        feeling = request.args.get("feeling")
        if not feeling:
            return jsonify({"error": "Missing feeling"}), 400

        resp = (
            supabase.table(mascot_table)
            .select("id, feeling, encourageWords")
            .eq("feeling", feeling)
            .execute()
        )
        rows = _exec_data(resp) or []

        if not rows:
            return jsonify({"error": "No rows found"}), 404

        words = [row["encourageWords"] for row in rows if row.get("encourageWords")]
        return jsonify({"feeling": feeling, "encourageWords": words}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/encouragementAll", methods=["GET"])
def get_all_encouragement():
    """
    Get all encouragement entries
    ---
    tags:
      - encouragement
    responses:
      200:
        description: List of all encouragement rows
      500:
        description: Server error
    """
    try:
        resp = (
            supabase.table(mascot_table)
            .select("id, feeling, encourageWords")
            .order("id", desc=True)
            .execute()
        )
        rows = _exec_data(resp) or []
        return jsonify({"rows": rows, "count": len(rows)}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ---------- Friends ----------
@app.route("/friends", methods=["GET"])
def getFriendsByfriendofuid():
    """
    Get friends by owner (friendofuid)
    ---
    tags:
      - friends
    parameters:
      - in: query
        name: friendofuid
        type: integer
        required: true
        example: 42
    responses:
      200:
        description: List of friends
      400:
        description: Missing friendofuid
      500:
        description: Server error
    """
    try:
        owner_id = request.args.get("friendofuid", type=int)
        if owner_id is None:
            return jsonify({"error": "Missing friendofuid"}), 400

        resp = (
            supabase.table(friends_table)
            .select("*")
            .eq("friendofuid", owner_id)
            .order("id", desc=True)
            .execute()
        )
        rows = _exec_data(resp) or []
        return jsonify(rows), 200   # ✅ return list directly
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/friends", methods=["POST"])
def addFriend():
    """
    Add a new friend (username must already exist in users table)
    ---
    tags:
      - friends
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - friendofuid
            - username
          properties:
            friendofuid:
              type: integer
              example: 42
            username:
              type: string
              example: "Maria Tan"
            email:
              type: string
              example: "maria@example.com"
            phone:
              type: string
              example: "+65 8123 4567"
            relationship:
              type: string
              example: "classmate"
            tags:
              type: array
              description: text[]; pass array or comma-separated string
              items:
                type: string
              example:
                - gym
                - study
            emergencycontact:
              type: boolean
              example: false
    responses:
      201:
        description: Created
      400:
        description: Validation error
      404:
        description: Username not found in users
      500:
        description: Server error
    """
    try:
        body = request.get_json(silent=True) or {}
        if body.get("friendofuid") is None:
            return jsonify({"error": "friendofuid is required"}), 400
        if not body.get("username"):
            return jsonify({"error": "username is required"}), 400

        # Ensure the username exists in the users table
        user_row = _get_user_by_username(body["username"])
        if not user_row:
            return jsonify({"error": "username not found in users"}), 404

        payload = _filter_friend_fields(body)
        resp = supabase.table(friends_table).insert(payload).execute()
        created = _exec_data(resp)
        return jsonify({"message": "Created", "row": created[0] if created else None}), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/friends", methods=["PUT"])
def updateFriendDetailsByid():
    """
    Update friend details by id
    ---
    tags:
      - friends
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - id
          properties:
            id:
              type: integer
              example: 123
            friendofuid:
              type: integer
              example: 42
            username:
              type: string
              example: "Maria T."
            email:
              type: string
            phone:
              type: string
            relationship:
              type: string
            tags:
              type: array
              description: text[]; array or comma-separated string accepted
              items:
                type: string
            emergencycontact:
              type: boolean
    responses:
      200:
        description: Updated
      400:
        description: Missing id or no fields to update
      404:
        description: Row not found
      500:
        description: Server error
    """
    try:
        body = request.get_json(silent=True) or {}
        row_id = body.get("id")
        if row_id is None:
            return jsonify({"error": "Missing id"}), 400

        fields = _filter_friend_fields(body)
        if not fields:
            return jsonify({"error": "No fields to update"}), 400

        resp = supabase.table(friends_table).update(fields).eq("id", row_id).execute()
        updated = _exec_data(resp)
        if not updated:
            return jsonify({"error": "Row not found"}), 404

        return jsonify({"message": "Updated", "row": updated[0]}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ---------- Main ----------
if __name__ == "__main__":
    app.run(debug=True)
