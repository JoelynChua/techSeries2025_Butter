from flask import Flask, request, jsonify
from supabase import create_client, Client
from flasgger import Swagger
from dotenv import load_dotenv
# Removed uuid4 import since we're using auto-incrementing IDs
import os

# ---- Load environment variables ----
load_dotenv()

app = Flask(__name__)

# ---- Swagger config ----
app.config["SWAGGER"] = {
    "title": "API",
    "uiversion": 3
}
swagger = Swagger(app)

# ---- Supabase setup ----
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
if not SUPABASE_URL or not SUPABASE_KEY:
    raise RuntimeError("Missing SUPABASE_URL or SUPABASE_KEY in .env")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

USERS_TABLE = "users"  # columns: userId (PK, auto-increment BIGINT), email, password, username, mobile, friendList (text array)

# ---------- Helpers ----------
def _exec_data(response):
    """
    Execute a Supabase response and return its data safely.
    Raises a readable Exception if the response has an error.
    """
    if hasattr(response, 'data') and hasattr(response, 'count'):
        # New supabase-py v2+ response format
        return response.data
    elif isinstance(response, dict):
        # Older response format or error case
        if response.get("error"):
            err = response["error"]
            msg = err.get("message") if isinstance(err, dict) else str(err)
            raise Exception(msg)
        return response.get("data")
    else:
        # Direct data response
        return response

def _row_to_public_user(row: dict) -> dict:
    """Hide sensitive field (password) before returning to client."""
    if not row:
        return None
    return {
        "userId": row.get("userId"),
        "email": row.get("email"),
        "username": row.get("username"),
        "mobile": row.get("mobile"),
        "friendList": row.get("friendList") or [],
    }

def _get_user_by_email(email: str):
    try:
        response = supabase.table(USERS_TABLE).select("*").eq("email", email).execute()
        data = _exec_data(response)
        return data[0] if data and len(data) > 0 else None
    except Exception as e:
        print(f"Error getting user by email: {e}")
        return None

def _get_user_by_id(user_id: str):
    try:
        response = supabase.table(USERS_TABLE).select("*").eq("userId", user_id).execute()
        data = _exec_data(response)
        return data[0] if data and len(data) > 0 else None
    except Exception as e:
        print(f"Error getting user by ID: {e}")
        return None

def _create_user(email: str, password: str, username: str = None, mobile: str = None):
    """Create a user row; returns created row dict. userId will be auto-generated as BIGINT."""
    payload = {
        "email": email,
        "password": password,  # TODO: hash in production
        "username": username,
        "mobile": mobile,
        "friendList": [],
    }
    # Remove None values (userId is auto-generated by database)
    payload = {k: v for k, v in payload.items() if v is not None}

    try:
        response = supabase.table(USERS_TABLE).insert(payload).execute()
        data = _exec_data(response)
        return data[0] if data and len(data) > 0 else None
    except Exception as e:
        print(f"Error creating user: {e}")
        raise e

def _update_friendlist_by_id(user_id: str, new_list):
    try:
        response = supabase.table(USERS_TABLE).update({"friendList": new_list}).eq("userId", user_id).execute()
        data = _exec_data(response)
        return data[0] if data and len(data) > 0 else None
    except Exception as e:
        print(f"Error updating friend list: {e}")
        raise e

def _update_user_fields_by_id(user_id: str, fields: dict):
    """Update selected fields for a user; returns updated row dict."""
    fields = {k: v for k, v in fields.items() if v is not None}
    if not fields:
        return None
    
    try:
        response = supabase.table(USERS_TABLE).update(fields).eq("userId", user_id).execute()
        data = _exec_data(response)
        return data[0] if data and len(data) > 0 else None
    except Exception as e:
        print(f"Error updating user fields: {e}")
        raise e

# ---------- Routes ----------

@app.route("/health", methods=["GET"])
def health():
    """
    Health check
    ---
    tags:
      - system
    responses:
      200:
        description: OK
    """
    return jsonify({"status": "ok"}), 200


@app.route("/login", methods=["POST"])
def login():
    """
    Login (custom users table)
    NOTE: Returns userId upon successful login.
    ---
    tags:
      - auth
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              format: email
              example: user@example.com
            password:
              type: string
              example: mypassword123
    responses:
      200:
        description: Logged in
        schema:
          type: object
          properties:
            message:
              type: string
            user:
              type: object
              properties:
                userId:
                  type: string
                email:
                  type: string
                username:
                  type: string
                mobile:
                  type: string
                friendList:
                  type: array
                  items:
                    type: string
      400:
        description: Missing or bad request
      401:
        description: Invalid credentials
    """
    data = request.get_json(silent=True) or {}
    email = data.get("email")
    password = data.get("password")

    if not email or not password:
        return jsonify({"error": "Missing email or password"}), 400

    try:
        user = _get_user_by_email(email)
        if not user or user.get("password") != password:
            return jsonify({"error": "Invalid credentials"}), 401

        return jsonify({
            "message": "Login successful",
            "user": _row_to_public_user(user)
        }), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/signup", methods=["POST"])
def signup():
    """
    Sign up (create user)
    ---
    tags:
      - auth
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              format: email
              example: newuser@example.com
            password:
              type: string
              example: StrongPass123
            username:
              type: string
              example: New User
            mobile:
              type: string
              example: "+65 9123 4567"
            userId:
              type: integer
              example: 12345
    responses:
      201:
        description: User created
        schema:
          type: object
          properties:
            message:
              type: string
            user:
              type: object
              properties:
                userId:
                  type: string
                email:
                  type: string
                username:
                  type: string
                mobile:
                  type: string
                friendList:
                  type: array
                  items:
                    type: string
      400:
        description: Missing or bad request
      409:
        description: Email already exists
    """
    data = request.get_json(silent=True) or {}
    email = data.get("email")
    password = data.get("password")
    username = data.get("username")
    mobile = data.get("mobile")
    user_id = data.get("userId")

    if not email or not password:
        return jsonify({"error": "Missing email or password"}), 400

    try:
        existing = _get_user_by_email(email)
        if existing:
            return jsonify({"error": "Email already exists"}), 409

        created = _create_user(
            email=email,
            password=password,
            username=username,
            mobile=mobile
        )
        return jsonify({
            "message": "User created",
            "user": _row_to_public_user(created)
        }), 201

    except Exception as e:
        return jsonify({"error": str(e)}), 400
    

@app.route("/userProfile", methods=["GET"])
def get_user_profile():
    """
    Get user profile by userId
    ---
    tags:
      - users
    parameters:
      - in: query
        name: userId
        required: true
        type: integer
        example: 12345
    responses:
      200:
        description: User profile
        schema:
          type: object
          properties:
            userId:
              type: string
            email:
              type: string
            username:
              type: string
            mobile:
              type: string
            friendList:
              type: array
              items:
                type: string
      400:
        description: Missing userId
      404:
        description: User not found
    """
    user_id = request.args.get("userId")
    if not user_id:
        return jsonify({"error": "Missing userId"}), 400

    try:
        user = _get_user_by_id(user_id)
        if not user:
            return jsonify({"error": "User not found"}), 404

        return jsonify(_row_to_public_user(user)), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/userProfile", methods=["PUT"])
def update_user_profile():
    """
    Update user profile (by userId)
    ---
    tags:
      - users
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - userId
          properties:
            userId:
              type: integer
              example: 12345
            email:
              type: string
              format: email
              example: user@example.com
            password:
              type: string
              example: NewPass123
            username:
              type: string
              example: Updated Name
            mobile:
              type: string
              example: "+65 9000 0000"
    responses:
      200:
        description: Updated user
        schema:
          type: object
          properties:
            userId:
              type: string
            email:
              type: string
            username:
              type: string
            mobile:
              type: string
            friendList:
              type: array
              items:
                type: string
      400:
        description: Missing userId or no fields to update
      404:
        description: User not found
    """
    data = request.get_json(silent=True) or {}
    user_id = data.get("userId")
    if not user_id:
        return jsonify({"error": "Missing userId"}), 400

    try:
        user = _get_user_by_id(user_id)
        if not user:
            return jsonify({"error": "User not found"}), 404

        fields = {
            "email": data.get("email"),
            "password": data.get("password"),   # TODO: hash in production
            "username": data.get("username"),
            "mobile": data.get("mobile"),
        }

        updated = _update_user_fields_by_id(user_id, fields)
        if not updated:
            return jsonify({"error": "No fields to update"}), 400

        return jsonify(_row_to_public_user(updated)), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/addFriend", methods=["POST"])
def add_friend():
    """
    Add a friend to friendList (by userId)
    NOTE: user can be identified by userId or email (if userId not provided)
    To delete a friend, delete using his/her email.
    ---
    tags:
      - friends
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - userId
            - friendEmail
          properties:
            userId:
              type: string
              example: 2f0d2e7c-1234-5678-9abc-def012345678
            friendEmail:
              type: string
              format: email
              example: friend@example.com
            email:
              type: string
              format: email
              example: user@example.com
    responses:
      200:
        description: Updated friendList
    """
    data = request.get_json(silent=True) or {}
    user_id = data.get("userId")
    friend_email = data.get("friendEmail")
    fallback_email = data.get("email")

    if not user_id and not fallback_email:
        return jsonify({"error": "Missing userId (or email)"}), 400
    if not friend_email:
        return jsonify({"error": "Missing friendEmail"}), 400

    try:
        user = _get_user_by_id(user_id) if user_id else _get_user_by_email(fallback_email)
        if not user:
            return jsonify({"error": "User not found"}), 404

        friends = user.get("friendList") or []
        if friend_email not in friends:
            friends.append(friend_email)

        updated = _update_friendlist_by_id(user.get("userId"), friends)
        return jsonify(_row_to_public_user(updated)), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/deleteFriend", methods=["DELETE"])
def delete_friend():
    """
    Delete a friend from friendList (by userId or email)
    ---
    tags:
      - friends
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - friendEmail
          properties:
            userId:
              type: string
              example: 2f0d2e7c-1234-5678-9abc-def012345678
            email:
              type: string
              format: email
              example: user@example.com
            friendEmail:
              type: string
              format: email
              example: friend@example.com
    responses:
      200:
        description: Updated friendList
    """
    data = request.get_json(silent=True) or {}
    user_id = data.get("userId")
    fallback_email = data.get("email")
    friend_email = data.get("friendEmail")

    if not user_id and not fallback_email:
        return jsonify({"error": "Missing userId (or email)"}), 400
    if not friend_email:
        return jsonify({"error": "Missing friendEmail"}), 400

    try:
        user = _get_user_by_id(user_id) if user_id else _get_user_by_email(fallback_email)
        if not user:
            return jsonify({"error": "User not found"}), 404

        friends = user.get("friendList") or []
        friends = [f for f in friends if f != friend_email]

        updated = _update_friendlist_by_id(user.get("userId"), friends)
        return jsonify(_row_to_public_user(updated)), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(debug=True)